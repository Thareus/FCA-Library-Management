services:
  redis:
    image: redis:alpine
    container_name: library_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - library-network

  backend:
    container_name: library_backend
    build: 
      context: .
      dockerfile: docker/backend/Dockerfile
    # Run the development server when DJANGO_DEBUG is True,
    # otherwise default to Gunicorn defined in the Dockerfile
    command: >-
      sh -c "if [ \"$DJANGO_DEBUG\" = 'True' ]; then \
                python manage.py runserver 0.0.0.0:8000; \
              else \
                gunicorn --bind 0.0.0.0:8000 library.wsgi:application; \
              fi"
    volumes:
      - ./library:/app
    ports:
      - "8000:8000"
    environment:
      - DJANGO_SETTINGS_MODULE=library.settings
      - REDIS_URL=redis://redis:6379/0
      - PYTHONPATH=/app
      - CORS_ALLOWED_ORIGINS=http://localhost:5173,http://127.0.0.1:5173
      - ALLOWED_HOSTS=localhost,127.0.0.1,backend
      - DJANGO_DEBUG=${DJANGO_DEBUG:-False}
      - DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1,backend
    depends_on:
      - redis
    networks:
      - library-network

  celery:
    container_name: library_celery
    build: 
      context: .
      dockerfile: docker/backend/Dockerfile
    command: celery -A library worker -l info -P gevent --concurrency=4
    volumes:
      - ./library:/app
    environment:
      - DJANGO_SETTINGS_MODULE=library.settings
      - PYTHONPATH=/app
      - C_FORCE_ROOT=1
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - redis
      - backend
    networks:
      - library-network

  frontend:
    container_name: library_frontend
    build: 
      context: .
      dockerfile: docker/frontend/Dockerfile
      target: development  # Use development stage for hot-reloading
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=1
      - VITE_API_URL=
      - VITE_USE_PROXY=true
      - VITE_API_SERVER_URL=http://backend:8000
    depends_on:
      - backend
    stdin_open: true
    tty: true
    networks:
      - library-network

  # Production frontend service (uncomment when needed)
  # frontend-prod:
  #   container_name: library_frontend_prod
  #   build:
  #     context: .
  #     dockerfile: docker/frontend/Dockerfile
  #     target: production
  #   ports:
  #     - "80:80"
  #   depends_on:
  #     - backend
  #   networks:
  #     - library-network

networks:
  library-network:
    driver: bridge

volumes:
  redis_data: